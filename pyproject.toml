[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-video-automation"
version = "0.1.0"
description = "AI-powered video automation pipeline for content creation and multi-platform publishing"
authors = [
    {name = "AI Video Automation Team", email = "team@aivideoautomation.com"}
]
readme = "README_PROJECT.md"
license = {text = "MIT"}
keywords = ["ai", "video", "automation", "fastapi", "celery", "content-creation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Multimedia :: Video :: Conversion",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.11"

dependencies = [
    # Core Web Framework
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "gunicorn>=21.2.0",
    
    # Database & ORM
    "sqlalchemy[asyncio]>=2.0.23",
    "asyncpg>=0.29.0",
    "alembic>=1.12.1",
    
    # Data Validation & Serialization
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Task Queue & Caching
    "celery>=5.3.4",
    "redis>=5.0.1",
    "kombu>=5.3.4",
    
    # HTTP Clients & Requests
    "httpx>=0.25.2",
    "aiohttp>=3.9.1",
    "requests>=2.31.0",
    
    # Authentication & Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    
    # File Processing & Media
    "yt-dlp>=2023.11.16",
    "ffmpeg-python>=0.2.0",
    
    # AI & ML Services
    "openai>=1.3.9",
    "elevenlabs>=0.2.26",
    
    # Cloud Storage
    "boto3>=1.34.0",
    "google-cloud-storage>=2.10.0",
    
    # Social Media APIs
    "google-api-python-client>=2.108.0",
    "google-auth-httplib2>=0.1.1",
    "google-auth-oauthlib>=1.1.0",
    
    # Monitoring & Logging
    "python-json-logger>=2.0.7",
    "prometheus-fastapi-instrumentator>=6.1.0",
    "sentry-sdk[fastapi]>=1.38.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "click>=8.1.7",
    "rich>=13.7.0",
    "tenacity>=8.2.3",
    "pendulum>=2.1.2",
    
    # CORS & Middleware
    "python-cors>=1.7.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.2",  # For testing FastAPI
    "faker>=20.1.0",
    
    # Code Quality
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pre-commit>=3.5.0",
    
    # Documentation
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "mkdocstrings[python]>=0.24.0",
    
    # Development Tools
    "ipython>=8.17.2",
    "jupyter>=1.0.0",
    "watchdog>=3.0.0",
]

production = [
    # Production WSGI/ASGI servers
    "gunicorn>=21.2.0",
    "uvloop>=0.19.0",
    
    # Production monitoring
    "newrelic>=9.2.0",
    "datadog>=0.47.0",
    
    # Performance
    "orjson>=3.9.10",
    "ujson>=5.8.0",
]

testing = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "coverage[toml]>=7.3.2",
    "factory-boy>=3.3.0",
]

[project.urls]
Homepage = "https://github.com/oluobamzy/AI_VOICE_AUTOMATION"
Documentation = "https://github.com/oluobamzy/AI_VOICE_AUTOMATION/docs"
Repository = "https://github.com/oluobamzy/AI_VOICE_AUTOMATION.git"
Issues = "https://github.com/oluobamzy/AI_VOICE_AUTOMATION/issues"

[project.scripts]
ai-video-server = "app.main:app"
ai-video-worker = "app.tasks.celery_app:celery_app"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json"]

# Black Configuration
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["app"]
known_third_party = ["fastapi", "pydantic", "sqlalchemy", "celery"]

# MyPy Configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "yt_dlp.*",
    "ffmpeg.*",
    "elevenlabs.*",
    "boto3.*",
    "google.*",
]
ignore_missing_imports = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
]

# Coverage Configuration
[tool.coverage.run]
source = ["app"]
branch = true
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"